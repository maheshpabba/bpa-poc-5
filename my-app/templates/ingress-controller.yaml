{{- if and .Values.global.ingress_controller.create (not .Values.ingress_controller.external) }}

kind: ConfigMap
apiVersion: v1
# Edit and give the timeout atleast a minute extra than the api timeout configured in environment.txt
data:
  proxy-connect-timeout: "30"
  proxy-read-timeout: "360"
  proxy-send-timeout: "360"
metadata:
  name: nginx-configuration
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: {{.Release.Namespace}}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      {{- if .Values.global.registry }}
      imagePullSecrets:
        - name: {{ template "bpa.fullname" . }}-dcr
      {{- end }}
      serviceAccountName: nginx-ingress-serviceaccount
      {{- if .Values.global.enableTolerations }}
      tolerations:
      - key: node.kubernetes.io/not-ready
        effect: NoExecute
        tolerationSeconds: 0
      - key: node.kubernetes.io/unreachable
        effect: NoExecute
        tolerationSeconds: 0
      {{- end }}
      containers:
        - name: nginx-ingress-controller
          image: {{ template "imageRegistryUrl" . }}/ingress-controller:{{ .Values.imageVersions.ingress_controller }}
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --default-ssl-certificate=$(POD_NAMESPACE)/bpa-rel-bpa-crt 
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10

---
{{- if and .Values.ingress_controller.service.create }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.ingress_controller.service.name }}
  labels:
    app.kubernetes.io/name: {{ .Values.ingress_controller.service.name }}
    app.kubernetes.io/part-of: {{ .Values.ingress_controller.service.name }}
spec:
{{- if eq .Values.ingress_controller.service.type "LoadBalancer" }}
  {{- if .Values.ingress_controller.service.loadBalancerIP }}
  loadBalancerIP: {{ .Values.ingress_controller.service.loadBalancerIP }}
  {{- end }}
  {{- if .Values.ingress_controller.service.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
{{ toYaml .Values.ingress_controller.service.loadBalancerSourceRanges | indent 4 }}
  {{- end }}
{{- end }}
  type: {{ .Values.ingress_controller.service.type }}
  ports:
    {{- if and .Values.ingress_controller.service.httpPort.enable }}
    - name: http
      port: {{ .Values.ingress_controller.service.httpPort.port }}
      targetPort: {{ .Values.ingress_controller.service.httpPort.targetPort }}
      {{- if .Values.ingress_controller.service.httpPort.nodePort }}
      nodePort: {{ .Values.ingress_controller.service.httpPort.nodePort }}
      {{- end }}
      protocol: TCP
    {{- end }}
    {{- if and .Values.ingress_controller.service.httpsPort.enable }}
    - name: https
      port: {{ .Values.ingress_controller.service.httpsPort.port }}
      targetPort: {{ .Values.ingress_controller.service.httpsPort.targetPort }}
      {{- if .Values.ingress_controller.service.httpsPort.nodePort }}
      nodePort: {{ .Values.ingress_controller.service.httpsPort.nodePort }}
      {{- end }}
      protocol: TCP
    {{- end }}
  selector:
    app.kubernetes.io/name: {{ .Values.ingress_controller.service.name }}
    app.kubernetes.io/part-of: {{ .Values.ingress_controller.service.name }}

  {{- if .Values.ingress_controller.service.externalIPs }}
  externalIPs:
{{ toYaml .Values.ingress_controller.service.externalIPs | indent 4 }}
  {{- end }}

{{- end }}

---
{{- end }}