# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
      - development

pool:
  vmImage: ubuntu-latest

stages:
- stage: DockerBuild
  jobs:
  - job: One
    steps:
    - checkout: self
      clean: true
    - task: Docker@2
      inputs:
        containerRegistry: 'docker_acr'
        repository: '$(imageName)'
        command: 'buildAndPush'
        Dockerfile: 'microservices/mysql/Dockerfile.mysql'
        tags: '$(imageName)-5.7'
#        tags: '$(Build.SourceBranchName)-$(Build.BuildId)'
    - bash: |
        echo "This is the Job Docker Build"
        echo "##vso[task.setvariable variable=doThing;isOutput=true]Yes" #set variable doThing to Yes
- stage: helmdeploy
  dependsOn: One
  condition: eq(dependencies.One.outputs['DetermineResult.doThing'], 'Yes') #map doThing and check the value
  jobs:
  - job: two
    steps:
    - script: echo "Docker Build was successful, hence deploying helm"
    - task: HelmDeploy@0
      displayName: helm build
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: $(cluster_name)
        namespace: $(bpa_ns)
        command: 'install'
        chartType: 'FilePath'
        chartPath: 'my-app/'
        releaseName: $(bpa-rel)
        valueFile: 'my-app/values.yaml'

