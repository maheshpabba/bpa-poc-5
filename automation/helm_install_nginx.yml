# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
      - development

pool:
  vmImage: ubuntu-latest


stages:
- stage: DockerBuild
  jobs:
  - job: One
    steps:
    - checkout: self
      clean: true
    - template: create_docker_images.yml
      parameters:
        images: ["mysql","voting"]
    
- stage: helmdeploy
  dependsOn: DockerBuild
#  condition: eq(dependencies.One.outputs['DetermineResult.doThing'], 'Yes') #map doThing and check the value
  jobs:
  - job: two
    steps:
    - script: echo "Creating if bpa-ns doesnot exist"
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: $(cluster_name)
        command: 'apply'
        useConfigurationFile: true
        configurationType: 'inline'
        inline: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: $(bpa_ns)
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'

  - job: three
    steps:
    - checkout: self
      clean: true
    - script: echo "Docker Build was successful, hence deploying helm"
    - task: HelmDeploy@0
      displayName: helm build
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: $(cluster_name)
        namespace: $(bpa_ns)
        command: 'install'
        chartType: 'FilePath'
        chartPath: 'my-app/'
        releaseName: $(bpa-rel)
        valueFile: 'my-app/values.yaml'
        arguments: '--set mysql.imageTag=$(Build.SourceBranchName)-$(Build.BuildId),voting.imageTag=$(Build.SourceBranchName)-$(Build.BuildId)'

